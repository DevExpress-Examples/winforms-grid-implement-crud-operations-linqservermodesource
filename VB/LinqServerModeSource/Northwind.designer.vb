' Developer Express Code Central Example:
' How to implement CRUD operations using XtraGrid and LinqServeModeSource
' 
' This example demonstrates how to implement create, update and delete operations
' using XtraGrid and LinqServeModeSource.
' This example works with the standard
' SQL Northwind database.
' 
' You can find sample updates and versions for different programming languages here:
' http://www.devexpress.com/example=E4498
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.296
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Data
Imports System.Collections.Generic
Imports System.Reflection
Imports System.Linq
Imports System.Linq.Expressions
Imports System.ComponentModel
Imports System

Namespace LinqServerModeSource

    <Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Northwind")>
    Public Partial Class NorthwindDataContext
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New System.Data.Linq.Mapping.AttributeMappingSource()

#Region "Extensibility Method Definitions"
        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub InsertCustomer(ByVal instance As LinqServerModeSource.Customer)
        End Sub

        Partial Private Sub UpdateCustomer(ByVal instance As LinqServerModeSource.Customer)
        End Sub

        Partial Private Sub DeleteCustomer(ByVal instance As LinqServerModeSource.Customer)
        End Sub

        Partial Private Sub InsertOrder(ByVal instance As LinqServerModeSource.Order)
        End Sub

        Partial Private Sub UpdateOrder(ByVal instance As LinqServerModeSource.Order)
        End Sub

        Partial Private Sub DeleteOrder(ByVal instance As LinqServerModeSource.Order)
        End Sub

#End Region
        Public Sub New()
            MyBase.New(Global.LinqServerModeSource.Properties.Settings.[Default].NorthwindConnectionString, LinqServerModeSource.NorthwindDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, LinqServerModeSource.NorthwindDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, LinqServerModeSource.NorthwindDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            Me.OnCreated()
        End Sub

        Public ReadOnly Property Customers As System.Data.Linq.Table(Of LinqServerModeSource.Customer)
            Get
                Return Me.GetTable(Of LinqServerModeSource.Customer)()
            End Get
        End Property

        Public ReadOnly Property Orders As System.Data.Linq.Table(Of LinqServerModeSource.Order)
            Get
                Return Me.GetTable(Of LinqServerModeSource.Order)()
            End Get
        End Property
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customers")>
    Public Partial Class Customer
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As System.ComponentModel.PropertyChangingEventArgs = New System.ComponentModel.PropertyChangingEventArgs(System.[String].Empty)

        Private _CustomerID As String

        Private _CompanyName As String

        Private _ContactName As String

        Private _ContactTitle As String

        Private _Address As String

        Private _City As String

        Private _Region As String

        Private _PostalCode As String

        Private _Country As String

        Private _Phone As String

        Private _Fax As String

        Private _Orders As System.Data.Linq.EntitySet(Of LinqServerModeSource.Order)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub

        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub

        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub OnCustomerIDChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnCustomerIDChanged()
        End Sub

        Partial Private Sub OnCompanyNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnCompanyNameChanged()
        End Sub

        Partial Private Sub OnContactNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnContactNameChanged()
        End Sub

        Partial Private Sub OnContactTitleChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnContactTitleChanged()
        End Sub

        Partial Private Sub OnAddressChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnAddressChanged()
        End Sub

        Partial Private Sub OnCityChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnCityChanged()
        End Sub

        Partial Private Sub OnRegionChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnRegionChanged()
        End Sub

        Partial Private Sub OnPostalCodeChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnPostalCodeChanged()
        End Sub

        Partial Private Sub OnCountryChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnCountryChanged()
        End Sub

        Partial Private Sub OnPhoneChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnPhoneChanged()
        End Sub

        Partial Private Sub OnFaxChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnFaxChanged()
        End Sub

#End Region
        Public Sub New()
            Me._Orders = New System.Data.Linq.EntitySet(Of LinqServerModeSource.Order)(New System.Action(Of LinqServerModeSource.Order)(AddressOf Me.attach_Orders), New System.Action(Of LinqServerModeSource.Order)(AddressOf Me.detach_Orders))
            Me.OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="NChar(5) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
        Public Property CustomerID As String
            Get
                Return Me._CustomerID
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._CustomerID, value)) Then
                    Me.OnCustomerIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._CustomerID = value
                    Me.SendPropertyChanged("CustomerID")
                    Me.OnCustomerIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
        Public Property CompanyName As String
            Get
                Return Me._CompanyName
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._CompanyName, value)) Then
                    Me.OnCompanyNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._CompanyName = value
                    Me.SendPropertyChanged("CompanyName")
                    Me.OnCompanyNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="NVarChar(30)")>
        Public Property ContactName As String
            Get
                Return Me._ContactName
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ContactName, value)) Then
                    Me.OnContactNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._ContactName = value
                    Me.SendPropertyChanged("ContactName")
                    Me.OnContactNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactTitle", DbType:="NVarChar(30)")>
        Public Property ContactTitle As String
            Get
                Return Me._ContactTitle
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ContactTitle, value)) Then
                    Me.OnContactTitleChanging(value)
                    Me.SendPropertyChanging()
                    Me._ContactTitle = value
                    Me.SendPropertyChanged("ContactTitle")
                    Me.OnContactTitleChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(60)")>
        Public Property Address As String
            Get
                Return Me._Address
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Address, value)) Then
                    Me.OnAddressChanging(value)
                    Me.SendPropertyChanging()
                    Me._Address = value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(15)")>
        Public Property City As String
            Get
                Return Me._City
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._City, value)) Then
                    Me.OnCityChanging(value)
                    Me.SendPropertyChanging()
                    Me._City = value
                    Me.SendPropertyChanged("City")
                    Me.OnCityChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="NVarChar(15)")>
        Public Property Region As String
            Get
                Return Me._Region
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Region, value)) Then
                    Me.OnRegionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Region = value
                    Me.SendPropertyChanged("Region")
                    Me.OnRegionChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(10)")>
        Public Property PostalCode As String
            Get
                Return Me._PostalCode
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._PostalCode, value)) Then
                    Me.OnPostalCodeChanging(value)
                    Me.SendPropertyChanging()
                    Me._PostalCode = value
                    Me.SendPropertyChanged("PostalCode")
                    Me.OnPostalCodeChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(15)")>
        Public Property Country As String
            Get
                Return Me._Country
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Country, value)) Then
                    Me.OnCountryChanging(value)
                    Me.SendPropertyChanging()
                    Me._Country = value
                    Me.SendPropertyChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(24)")>
        Public Property Phone As String
            Get
                Return Me._Phone
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Phone, value)) Then
                    Me.OnPhoneChanging(value)
                    Me.SendPropertyChanging()
                    Me._Phone = value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(24)")>
        Public Property Fax As String
            Get
                Return Me._Fax
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Fax, value)) Then
                    Me.OnFaxChanging(value)
                    Me.SendPropertyChanging()
                    Me._Fax = value
                    Me.SendPropertyChanged("Fax")
                    Me.OnFaxChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Order", Storage:="_Orders", ThisKey:="CustomerID", OtherKey:="CustomerID")>
        Public Property Orders As EntitySet(Of LinqServerModeSource.Order)
            Get
                Return Me._Orders
            End Get

            Set(ByVal value As EntitySet(Of LinqServerModeSource.Order))
                Me._Orders.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As System.ComponentModel.PropertyChangingEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, LinqServerModeSource.Customer.emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As System.[String])
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Orders(ByVal entity As LinqServerModeSource.Order)
            Me.SendPropertyChanging()
            entity.Customer = Me
        End Sub

        Private Sub detach_Orders(ByVal entity As LinqServerModeSource.Order)
            Me.SendPropertyChanging()
            entity.Customer = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Orders")>
    Public Partial Class Order
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As System.ComponentModel.PropertyChangingEventArgs = New System.ComponentModel.PropertyChangingEventArgs(System.[String].Empty)

        Private _OrderID As Integer

        Private _CustomerID As String

        Private _EmployeeID As System.Nullable(Of Integer)

        Private _OrderDate As System.Nullable(Of System.DateTime)

        Private _RequiredDate As System.Nullable(Of System.DateTime)

        Private _ShippedDate As System.Nullable(Of System.DateTime)

        Private _ShipVia As System.Nullable(Of Integer)

        Private _Freight As System.Nullable(Of Decimal)

        Private _ShipName As String

        Private _ShipAddress As String

        Private _ShipCity As String

        Private _ShipRegion As String

        Private _ShipPostalCode As String

        Private _ShipCountry As String

        Private _ShipAdress As String

        Private _Customer As System.Data.Linq.EntityRef(Of LinqServerModeSource.Customer)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub

        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub

        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnOrderIDChanged()
        End Sub

        Partial Private Sub OnCustomerIDChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnCustomerIDChanged()
        End Sub

        Partial Private Sub OnEmployeeIDChanging(ByVal value As System.Nullable(Of Integer))
        End Sub

        Partial Private Sub OnEmployeeIDChanged()
        End Sub

        Partial Private Sub OnOrderDateChanging(ByVal value As System.Nullable(Of System.DateTime))
        End Sub

        Partial Private Sub OnOrderDateChanged()
        End Sub

        Partial Private Sub OnRequiredDateChanging(ByVal value As System.Nullable(Of System.DateTime))
        End Sub

        Partial Private Sub OnRequiredDateChanged()
        End Sub

        Partial Private Sub OnShippedDateChanging(ByVal value As System.Nullable(Of System.DateTime))
        End Sub

        Partial Private Sub OnShippedDateChanged()
        End Sub

        Partial Private Sub OnShipViaChanging(ByVal value As System.Nullable(Of Integer))
        End Sub

        Partial Private Sub OnShipViaChanged()
        End Sub

        Partial Private Sub OnFreightChanging(ByVal value As System.Nullable(Of Decimal))
        End Sub

        Partial Private Sub OnFreightChanged()
        End Sub

        Partial Private Sub OnShipNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnShipNameChanged()
        End Sub

        Partial Private Sub OnShipAddressChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnShipAddressChanged()
        End Sub

        Partial Private Sub OnShipCityChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnShipCityChanged()
        End Sub

        Partial Private Sub OnShipRegionChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnShipRegionChanged()
        End Sub

        Partial Private Sub OnShipPostalCodeChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnShipPostalCodeChanged()
        End Sub

        Partial Private Sub OnShipCountryChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnShipCountryChanged()
        End Sub

        Partial Private Sub OnShipAdressChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnShipAdressChanged()
        End Sub

#End Region
        Public Sub New()
            Me._Customer = DirectCast(Nothing, Global.System.Data.Linq.EntityRef(Of Global.LinqServerModeSource.Customer))
            Me.OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", AutoSync:=System.Data.Linq.Mapping.AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property OrderID As Integer
            Get
                Return Me._OrderID
            End Get

            Set(ByVal value As Integer)
                If(Me._OrderID <> value) Then
                    Me.OnOrderIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._OrderID = value
                    Me.SendPropertyChanged("OrderID")
                    Me.OnOrderIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="NChar(5)")>
        Public Property CustomerID As String
            Get
                Return Me._CustomerID
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._CustomerID, value)) Then
                    If Me._Customer.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnCustomerIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._CustomerID = value
                    Me.SendPropertyChanged("CustomerID")
                    Me.OnCustomerIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeID", DbType:="Int")>
        Public Property EmployeeID As System.Nullable(Of Integer)
            Get
                Return Me._EmployeeID
            End Get

            Set(ByVal value As System.Nullable(Of Integer))
                If(Me._EmployeeID <> value) Then
                    Me.OnEmployeeIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._EmployeeID = value
                    Me.SendPropertyChanged("EmployeeID")
                    Me.OnEmployeeIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime")>
        Public Property OrderDate As System.Nullable(Of System.DateTime)
            Get
                Return Me._OrderDate
            End Get

            Set(ByVal value As System.Nullable(Of System.DateTime))
                If(Me._OrderDate <> value) Then
                    Me.OnOrderDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._OrderDate = value
                    Me.SendPropertyChanged("OrderDate")
                    Me.OnOrderDateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredDate", DbType:="DateTime")>
        Public Property RequiredDate As System.Nullable(Of System.DateTime)
            Get
                Return Me._RequiredDate
            End Get

            Set(ByVal value As System.Nullable(Of System.DateTime))
                If(Me._RequiredDate <> value) Then
                    Me.OnRequiredDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._RequiredDate = value
                    Me.SendPropertyChanged("RequiredDate")
                    Me.OnRequiredDateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippedDate", DbType:="DateTime")>
        Public Property ShippedDate As System.Nullable(Of System.DateTime)
            Get
                Return Me._ShippedDate
            End Get

            Set(ByVal value As System.Nullable(Of System.DateTime))
                If(Me._ShippedDate <> value) Then
                    Me.OnShippedDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._ShippedDate = value
                    Me.SendPropertyChanged("ShippedDate")
                    Me.OnShippedDateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipVia", DbType:="Int")>
        Public Property ShipVia As System.Nullable(Of Integer)
            Get
                Return Me._ShipVia
            End Get

            Set(ByVal value As System.Nullable(Of Integer))
                If(Me._ShipVia <> value) Then
                    Me.OnShipViaChanging(value)
                    Me.SendPropertyChanging()
                    Me._ShipVia = value
                    Me.SendPropertyChanged("ShipVia")
                    Me.OnShipViaChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Freight", DbType:="Money")>
        Public Property Freight As System.Nullable(Of Decimal)
            Get
                Return Me._Freight
            End Get

            Set(ByVal value As System.Nullable(Of Decimal))
                If(Me._Freight <> value) Then
                    Me.OnFreightChanging(value)
                    Me.SendPropertyChanging()
                    Me._Freight = value
                    Me.SendPropertyChanged("Freight")
                    Me.OnFreightChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipName", DbType:="NVarChar(40)")>
        Public Property ShipName As String
            Get
                Return Me._ShipName
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ShipName, value)) Then
                    Me.OnShipNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._ShipName = value
                    Me.SendPropertyChanged("ShipName")
                    Me.OnShipNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipAddress", DbType:="NVarChar(60)")>
        Public Property ShipAddress As String
            Get
                Return Me._ShipAddress
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ShipAddress, value)) Then
                    Me.OnShipAddressChanging(value)
                    Me.SendPropertyChanging()
                    Me._ShipAddress = value
                    Me.SendPropertyChanged("ShipAddress")
                    Me.OnShipAddressChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCity", DbType:="NVarChar(15)")>
        Public Property ShipCity As String
            Get
                Return Me._ShipCity
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ShipCity, value)) Then
                    Me.OnShipCityChanging(value)
                    Me.SendPropertyChanging()
                    Me._ShipCity = value
                    Me.SendPropertyChanged("ShipCity")
                    Me.OnShipCityChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipRegion", DbType:="NVarChar(15)")>
        Public Property ShipRegion As String
            Get
                Return Me._ShipRegion
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ShipRegion, value)) Then
                    Me.OnShipRegionChanging(value)
                    Me.SendPropertyChanging()
                    Me._ShipRegion = value
                    Me.SendPropertyChanged("ShipRegion")
                    Me.OnShipRegionChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipPostalCode", DbType:="NVarChar(10)")>
        Public Property ShipPostalCode As String
            Get
                Return Me._ShipPostalCode
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ShipPostalCode, value)) Then
                    Me.OnShipPostalCodeChanging(value)
                    Me.SendPropertyChanging()
                    Me._ShipPostalCode = value
                    Me.SendPropertyChanged("ShipPostalCode")
                    Me.OnShipPostalCodeChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCountry", DbType:="NVarChar(15)")>
        Public Property ShipCountry As String
            Get
                Return Me._ShipCountry
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ShipCountry, value)) Then
                    Me.OnShipCountryChanging(value)
                    Me.SendPropertyChanging()
                    Me._ShipCountry = value
                    Me.SendPropertyChanged("ShipCountry")
                    Me.OnShipCountryChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipAdress", DbType:="NVarChar(100)")>
        Public Property ShipAdress As String
            Get
                Return Me._ShipAdress
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ShipAdress, value)) Then
                    Me.OnShipAdressChanging(value)
                    Me.SendPropertyChanging()
                    Me._ShipAdress = value
                    Me.SendPropertyChanged("ShipAdress")
                    Me.OnShipAdressChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Order", Storage:="_Customer", ThisKey:="CustomerID", OtherKey:="CustomerID", IsForeignKey:=True)>
        Public Property Customer As Customer
            Get
                Return Me._Customer.Entity
            End Get

            Set(ByVal value As Customer)
                Dim previousValue As LinqServerModeSource.Customer = Me._Customer.Entity
                If((previousValue IsNot value) OrElse (Me._Customer.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If(previousValue IsNot Nothing) Then
                        Me._Customer.Entity = Nothing
                        previousValue.Orders.Remove(Me)
                    End If

                    Me._Customer.Entity = value
                    If(value IsNot Nothing) Then
                        value.Orders.Add(Me)
                        Me._CustomerID = value.CustomerID
                    Else
                        Me._CustomerID = DirectCast(Nothing, System.String)
                    End If

                    Me.SendPropertyChanged("Customer")
                End If
            End Set
        End Property

        Public Event PropertyChanging As System.ComponentModel.PropertyChangingEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, LinqServerModeSource.Order.emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As System.[String])
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub
    End Class
End Namespace
